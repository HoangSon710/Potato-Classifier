# -*- coding: utf-8 -*-
"""Generator - Potato diaseas Classification .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yGM5aYwlfPoP_mG4m_CN349J4snsqRCm
"""

!nvidia-smi



pip install split-folders

pip install ipython

import tensorflow as tf
import numpy as np
from tensorflow.keras import models, layers
import matplotlib.pyplot as plt
from IPython.display import HTML
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import splitfolders

from google.colab import drive
drive.mount('/content/drive')

#splitfolders.ratio("/content/drive/MyDrive/Project/Dataset Potatoes/PlantVillage",
#                   output="/content/drive/MyDrive/Colab Notebooks/Dataset_fixed",
#                   seed=1, 
#                   ratio=(.7, .1, .2), 
#                   group_prefix=None, 
#                 move=False)

IMAGE_SIZE = 256
BATCH_SIZE = 32
CHANNELS = 3

train_datagen = ImageDataGenerator (
    rescale = 1./255,
    horizontal_flip = True,
    rotation_range = 10
)

train_generator = train_datagen.flow_from_directory(
        '/content/drive/MyDrive/Colab Notebooks/Dataset_fixed/train',
        target_size=(IMAGE_SIZE, IMAGE_SIZE),
        batch_size=32,
        class_mode='sparse'
)

val_datagen = ImageDataGenerator (
    rescale = 1./255,
    horizontal_flip = True,
    rotation_range = 10
)

val_generator = val_datagen.flow_from_directory(
        '/content/drive/MyDrive/Colab Notebooks/Dataset_fixed/val',
        target_size=(IMAGE_SIZE, IMAGE_SIZE),
        batch_size=32,
        class_mode='sparse'
)

test_datagen = ImageDataGenerator (
    rescale = 1./255,
    horizontal_flip = True,
    rotation_range = 10
)

test_generator = test_datagen.flow_from_directory(
        '/content/drive/MyDrive/Colab Notebooks/Dataset_fixed/test',
        target_size=(IMAGE_SIZE, IMAGE_SIZE),
        batch_size=32,
        class_mode='sparse'
)

Input_shape = (IMAGE_SIZE, IMAGE_SIZE, CHANNELS)
n_classes = 3

model = models.Sequential([
    layers.InputLayer(input_shape = Input_shape),
    layers.Conv2D(32, (3,3), activation = "relu"),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, kernel_size = (3,3), activation = "relu"),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, kernel_size = (3,3), activation = "relu"),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation = "relu"),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation = "relu"),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation = "relu"),
    layers.Flatten(),
    layers.Dense(64, activation = "relu"),
    layers.Dense(n_classes, activation = "softmax")
])

model.summary()

model.compile(
    optimizer='adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits =False),
    metrics = ['accuracy']
)

class_names = list(train_generator.class_indices.keys())
class_names

#import PIL
#from pathlib import Path
#from PIL import UnidentifiedImageError

#path = Path('/content/drive/MyDrive/Colab Notebooks/Dataset_fixed').rglob("*.png")
#for img_p in path:
#    try:
#        img = PIL.Image.open(img_p)
#    except PIL.UnidentifiedImageError:
#            print(img_p)

model1 = model.fit(
    train_generator,
    steps_per_epoch = 47,
    batch_size = 32,
    validation_data = val_generator,
    validation_steps = 6,
    verbose = 1,
    epochs = 20
)

score = model.evaluate(test_generator)

score

acc = model1.history['accuracy']
val_acc = model1.history['val_accuracy']
loss = model1.history['loss']
val_loss = model1.history['val_loss']

plt.figure(figsize=(8,8))
plt.subplot(1,2,1)
plt.plot(range(20), acc, label = 'Training Accuracy')
plt.plot(range(20), val_acc, label = 'Validation Accuracy')
plt.legend(loc = 'lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1,2,2)
plt.plot(range(20), loss, label = 'Training Loss')
plt.plot(range(20), val_loss, label = 'Validation Loss')
plt.legend(loc = 'upper right')
plt.title('Training and Validation Loss')

def predict(model, img):
    img_array = tf.keras.preprocessing.image.img_to_array(images[i])
    img_array = tf.expand_dims(img_array, 0)

    predictions = model.predict(img_array)

    predicted_class = class_names[np.argmax(predictions[0])]
    confidence = round(100 * (np.max(predictions[0])), 2)
    return predicted_class, confidence

plt.figure(figsize=(15, 15))
for images, labels in test_generator:
    for i in range(9):
        ax = plt.subplot(3, 3, i+1)
        plt.imshow(images[i])
        
        predicted_class, confidence = predict(model, images[i])
        actual_class = class_names[int(labels[i])] 
        
        plt.title(f"Actual: {actual_class},\n Predicted: {predicted_class}.\n Confidence: {confidence}%", fontsize=10)
        
        plt.axis("off")
    break

model.save('/content/drive/MyDrive/Colab Notebooks/ Generator API.h5')